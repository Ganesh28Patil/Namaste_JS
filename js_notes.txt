How JS code is Executed ?
It create a Global Execution Context, 
And allocates Memory to all the varaible & functions
even before a single line of code is executed.

----------------------------------------------------------------

"Let" & "Const" are introduced in ES6 of Javascript.

'Let' & 'Const' declarations are hoisted in JS. 
They are hoisted differently then 'Var'.
'Let' & 'Const' are in Temporal Dead zone for a time being.

Temporal Dead Zone : 
It is the time span since when this "Let" varaible is hoisted and till it is initialised with some value.
The time between that is known as Temporal dead zone.

Example : 
consle.log(a);  // it will get hoisted in SCRIPT instead of Global
                // Uncaught RefferenceError: Cannot access 'a' before initialization.
let a = 10; // initalised and declaration

Whenever you tries to access the varaible in the Temporal dead zone it gives you an error (Refference error)


What is Block in JS.
Block is defined as { }
Block is also known compound statement.

{
    var a = 10;
    let b  = 20;
    const c  = 30;
}

In the above üëÜ senario  , 'b' & 'c' are in block scope and 'a' is in Global scope.
Block ‚ñ∂Ô∏è 
b: undefined
c: undefined
Global ‚ñ∂Ô∏è 
a: undefined

----------------------------------------------------------------

What is shadowing in JS ?

const c = 100;
{
    var a = 10;
    let b = 20;
    const c = 30;
    console.log('a:', a)  // 10
    console.log('b:', b)  // 20
    console.log('c:', c)  // 30
    // Here the value of C is shadowed (overwritten) for this perticular scope    
}
console.log('c:', c)  // 100

What is illigal-shadowing in JS ?
  while shadowing a variable, it should not cross the boundary of the scope, 
  i.e. we can shadow var variable by let variable but cannot do the opposite. 
  So, if we try to shadow let variable by var variable, it is known as Illegal Shadowing and 
  it will give the error as ‚Äúvariable is already defined.‚Äù

Example : 

let a = 20;
{
    var a = 50;
}

Here in this you will encounter an error,
Uncaught SyntaxError: Identifier 'a' has already been declared.

let a = 20;
{
    let a = 60;
}

this will working under shadowing.

var a  = 20;
{
    let a = 30;
}

this will also work under shadowing.

const a  = 20;
{
    const a = 80;
}

this will also work under shadowing.

----------------------------------------------------------------

What is Closure ?

 Function bundled with its lexical scope is known as closure,
 Closure is a function bunddled together with its lexical environment
Or 
 Closure along with its lexical socpe bunddled together is known as closure.
 Function along with its lexical scope forms a closure.

A Closure is  the combination of a function bunddled together with references to its surrounding state (the lexical environment)

Exmaple üëâ

   function x(){
       var a = 7;
       function y(){
           console.log(a); 
       }
       y();
   }
   x();

    if we set debugger on 'console.log(a);' ‚ñ∂Ô∏è 
        Closure (x) üîΩ  
            a: 7
    it means function y() is executing(accesing) lexical variable of function x() and this bundling of two function is known as closure.


Exmaple üëâ
   function x(){
       var a = 7;
       function y(){
           console.log(a);
       }
       return y;
   }
   var z = x();
    console.log(z); // this will print enitre body of functionn y.
    z(); // this will print the value of 'a' which is 7.


Exmaple üëâ
    function z(){
        var b = 900;
        dfunction x(){
            var a = 7;
            function y(){
                console.log('a: ',a,' b: ',b);                
            }
            y();
        }
        x();
    }


Uses of Closure : 
    1) Module Design Pattern 
    2) Currying
    3) Functions like once 
    4) Memoize
    5) Maintaining state in async world
    6) setTimeout
    7) Iterators
    8) and many more ...


----------------------------------------------------------------
 
what is setTimeout, how it works ?

function x(){
    var i = 1;
    setTimeout(function(){
        console.log(i);
    },3000);
}
 x();


 function sample(){
    for(var i = 1; i <=5; i++){
        function closure(x){
            setTimeout(function() {
                console.log(x);
            }, x * 1000);
        }
        closure(i);
    }

    console.log('Namaste Javascript | setTimeOut');
}

sample();

----------------------------------------------------------------
Disadvantage of closure is
Due to closure JS cannot do garbage collection so this turns to the problem of memory leak.
----------------------------------------------------------------

What is Garbage Collection in JS ?

Javascript Garbage Collection frees up (clean up) the memmory that is no longer used by program.

----------------------------------------------------------------

Memory leaks & Closure ‚ñ∂Ô∏è
    Closures themselves do not inherently cause memory leaks. However, 
    improper use of closures can lead to memory leaks if variables or objects that are no longer needed 
    are kept in memory by the closure, leading to unnecessary memory usage.

    When a closure holds onto large objects or references that are not needed anymore, 
    it can prevent the garbage collector from freeing up that memory.

  Example : 
   function outer() {
        let bigData = new Array(1000000).fill("Some large data");

        return function() {
            console.log('Closure in action');
        };
    }

    const closure = outer(); 
    // Even though 'bigData' is no longer needed, it is still retained in memory by the closure


=======================================================================================

In Short, A Closure in JS occurs when a function remembers and can access its lexical scope 
(variable in its outer function) even when outer function has finished its execution.

Example : 
function outer() {
    let counter = 0;

    function inner() {
        counter++; // 'counter' is remembered by the closure
        console.log(counter);
    }

    return inner;
}

const increment = outer();
increment(); // 1
increment(); // 2

In this example, even though the outer function has finished execution, 
the inner function retains access to the counter variable. 
This is the core behavior of closures.

=======================================================================================

